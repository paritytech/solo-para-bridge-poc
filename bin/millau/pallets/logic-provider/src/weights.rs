//! Autogenerated weights for `pallet_logic_provider`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-05-30, STEPS: `25`, REPEAT: 25, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../../target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_logic_provider
// --extrinsic
// *
// --steps
// 25
// --repeat
// 25
// --json-file=benchmark_raw.json
// --output
// ./weights_new.rs

// #![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn commit_processing_result_hash() -> Weight;
	fn reveal_processing_result_hash() -> Weight;
	/// the `s` parameter stands for the number of submissions
	fn issue_rewards_to_some_participants(s: u32) -> Weight;
	fn issue_rewards_to_all_participants(s: u32) -> Weight;
	fn set_majority_type() -> Weight;
	/// the `s` parameter stands for the number of submissions
	fn resolve_metadata_dispute(s: u32) -> Weight;
	/// the `metadatas` parameter stands for the number of metadatas to be scheduled
	fn on_finalize(metadatas: u32, max_participants: u32) -> Weight;
}

/// Weight functions for `logic_provider`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: LogicProvider CommitmentBlockNumbers (r:1 w:1)
	// Storage: Commitments Commits (r:1 w:1)
	// Storage: LogicProvider ProcessedHashes (r:1 w:0)
	// Storage: Commitments RevealWindow (r:1 w:0)
	// Storage: LogicProvider RoundStates (r:1 w:0)
	// Storage: LogicProvider MajorityType (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	fn commit_processing_result_hash() -> Weight {
		Weight::from_parts(33_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Commitments RevealWindow (r:1 w:0)
	// Storage: Commitments Commits (r:1 w:1)
	fn reveal_processing_result_hash() -> Weight {
		Weight::from_parts(15_000_000, 0)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: LogicProvider CommitmentBlockNumbers (r:1 w:1)
	// Storage: Commitments Commits (r:1 w:1)
	// Storage: LogicProvider MajorityType (r:1 w:0)
	// Storage: Balances Locks (r:6 w:6)
	// Storage: LogicProvider RoundStates (r:0 w:1)
	// Storage: LogicProvider ProcessedHashes (r:0 w:1)
	fn issue_rewards_to_some_participants(s: u32) -> Weight {
		Weight::from_parts(0, 0)
			// Standard Error: 28_000
			.saturating_add(Weight::from_parts(13_797_000, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1u64).saturating_mul(s as u64)))
	}
	// Storage: LogicProvider CommitmentBlockNumbers (r:1 w:1)
	// Storage: Commitments Commits (r:1 w:1)
	// Storage: LogicProvider MajorityType (r:1 w:0)
	// Storage: Balances Locks (r:10 w:10)
	// Storage: LogicProvider RoundStates (r:0 w:1)
	// Storage: LogicProvider ProcessedHashes (r:0 w:1)
	fn issue_rewards_to_all_participants(s: u32) -> Weight {
		Weight::from_parts(0, 0)
			// Standard Error: 30_000
			.saturating_add(Weight::from_parts(15_022_000, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((1u64).saturating_mul(s as u64)))
	}
	// Storage: LogicProvider MajorityType (r:0 w:1)
	fn set_majority_type() -> Weight {
		Weight::from_parts(1_000_000, 0).saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: LogicProvider RoundStates (r:1 w:1)
	// Storage: LogicProvider CommitmentBlockNumbers (r:1 w:1)
	// Storage: Commitments Commits (r:1 w:1)
	// Storage: Balances Locks (r:5 w:5)
	fn resolve_metadata_dispute(s: u32) -> Weight {
		Weight::from_parts(0, 0)
			// Standard Error: 22_000
			.saturating_add(Weight::from_parts(12_842_000, 0).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1u64).saturating_mul(s as u64)))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((1u64).saturating_mul(s as u64)))
	}

	fn on_finalize(metadatas: u32, max_participants: u32) -> Weight {
		Weight::from_parts(metadatas as u64, 0)
			.saturating_mul(
				Self::issue_rewards_to_some_participants(max_participants)
					.max(Self::issue_rewards_to_all_participants(max_participants)).ref_time(),
			)
			.saturating_add(
				T::DbWeight::get()
					.writes(1)
					.saturating_add(T::DbWeight::get().reads(1)),
			)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: LogicProvider CommitmentBlockNumbers (r:1 w:1)
	// Storage: Commitments Commits (r:1 w:1)
	// Storage: LogicProvider ProcessedHashes (r:1 w:0)
	// Storage: Commitments RevealWindow (r:1 w:0)
	// Storage: LogicProvider RoundStates (r:1 w:0)
	// Storage: LogicProvider MajorityType (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	fn commit_processing_result_hash() -> Weight {
		Weight::from_parts(33_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Commitments RevealWindow (r:1 w:0)
	// Storage: Commitments Commits (r:1 w:1)
	fn reveal_processing_result_hash() -> Weight {
		Weight::from_parts(15_000_000, 0)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: LogicProvider CommitmentBlockNumbers (r:1 w:1)
	// Storage: Commitments Commits (r:1 w:1)
	// Storage: LogicProvider MajorityType (r:1 w:0)
	// Storage: Balances Locks (r:6 w:6)
	// Storage: LogicProvider RoundStates (r:0 w:1)
	// Storage: LogicProvider ProcessedHashes (r:0 w:1)
	fn issue_rewards_to_some_participants(s: u32) -> Weight {
		Weight::from_parts(0, 0)
			// Standard Error: 28_000
			.saturating_add(Weight::from_parts(13_797_000, 0).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().reads((1u64).saturating_mul(s as u64)))
			.saturating_add(RocksDbWeight::get().writes(4))
			.saturating_add(RocksDbWeight::get().writes((1u64).saturating_mul(s as u64)))
	}
	// Storage: LogicProvider CommitmentBlockNumbers (r:1 w:1)
	// Storage: Commitments Commits (r:1 w:1)
	// Storage: LogicProvider MajorityType (r:1 w:0)
	// Storage: Balances Locks (r:10 w:10)
	// Storage: LogicProvider RoundStates (r:0 w:1)
	// Storage: LogicProvider ProcessedHashes (r:0 w:1)
	fn issue_rewards_to_all_participants(s: u32) -> Weight {
		Weight::from_parts(0, 0)
			// Standard Error: 30_000
			.saturating_add(Weight::from_parts(15_022_000, 0).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().reads((1u64).saturating_mul(s as u64)))
			.saturating_add(RocksDbWeight::get().writes(4))
			.saturating_add(RocksDbWeight::get().writes((1u64).saturating_mul(s as u64)))
	}
	// Storage: LogicProvider MajorityType (r:0 w:1)
	fn set_majority_type() -> Weight {
		Weight::from_parts(1_000_000, 0).saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: LogicProvider RoundStates (r:1 w:1)
	// Storage: LogicProvider CommitmentBlockNumbers (r:1 w:1)
	// Storage: Commitments Commits (r:1 w:1)
	// Storage: Balances Locks (r:5 w:5)
	fn resolve_metadata_dispute(s: u32) -> Weight {
		Weight::from_parts(0, 0)
			// Standard Error: 22_000
			.saturating_add(Weight::from_parts(12_842_000, 0).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().reads((1u64).saturating_mul(s as u64)))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((1u64).saturating_mul(s as u64)))
	}
	// Storage: LogicProvider StartingBlockForCurrentRound (r:1 w:1)
	fn on_finalize(_metadatas: u32, _max_participants: u32) -> Weight {
		RocksDbWeight::get()
			.writes(1)
			.saturating_add(RocksDbWeight::get().reads(1))
	}
}
